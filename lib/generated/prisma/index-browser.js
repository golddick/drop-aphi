
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.17.0
 * Query Engine version: c0aafc03b8ef6cdced8654b9a817999e02457d6a
 */
Prisma.prismaVersion = {
  client: "6.17.0",
  engine: "c0aafc03b8ef6cdced8654b9a817999e02457d6a"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  email: 'email',
  fullName: 'fullName',
  userName: 'userName',
  password: 'password',
  imageUrl: 'imageUrl',
  paystackCustomerId: 'paystackCustomerId',
  paystackSubscriptionId: 'paystackSubscriptionId',
  plan: 'plan',
  role: 'role',
  subscriptionStatus: 'subscriptionStatus',
  accType: 'accType',
  currentPeriodEnd: 'currentPeriodEnd',
  organization: 'organization',
  website: 'website',
  kycStatus: 'kycStatus',
  SenderName: 'SenderName',
  amount: 'amount',
  currency: 'currency',
  lastPaymentDate: 'lastPaymentDate',
  nextPaymentDate: 'nextPaymentDate',
  successfulPayments: 'successfulPayments',
  failedAttempts: 'failedAttempts',
  subscriberLimit: 'subscriberLimit',
  emailLimit: 'emailLimit',
  blogPostLimit: 'blogPostLimit',
  aiGenerationLimit: 'aiGenerationLimit',
  termsAndConditionsAccepted: 'termsAndConditionsAccepted',
  approvedKYC: 'approvedKYC',
  isEmailVerified: 'isEmailVerified',
  isLoggedIn: 'isLoggedIn',
  is2FAEnabled: 'is2FAEnabled',
  createdAt: 'createdAt',
  loggedInAt: 'loggedInAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.RefreshTokenScalarFieldEnum = {
  id: 'id',
  jti: 'jti',
  userId: 'userId',
  hashed: 'hashed',
  userAgent: 'userAgent',
  ip: 'ip',
  revoked: 'revoked',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt'
};

exports.Prisma.OTPScalarFieldEnum = {
  id: 'id',
  email: 'email',
  otp: 'otp',
  attempts: 'attempts',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.InvoiceScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  description: 'description',
  amount: 'amount',
  status: 'status',
  invoiceUrl: 'invoiceUrl',
  date: 'date',
  externalId: 'externalId'
};

exports.Prisma.ThirdPartyOTPScalarFieldEnum = {
  email: 'email',
  code: 'code',
  otpType: 'otpType',
  expiresAt: 'expiresAt',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  attempts: 'attempts'
};

exports.Prisma.ApiKeyScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  keyHash: 'keyHash',
  jwt: 'jwt',
  createdAt: 'createdAt',
  isTrial: 'isTrial',
  expiresAt: 'expiresAt'
};

exports.Prisma.KycScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  accountType: 'accountType',
  status: 'status',
  levels: 'levels',
  documents: 'documents',
  livePhoto: 'livePhoto',
  reviewedTime: 'reviewedTime',
  reviewedBy: 'reviewedBy',
  rejectedResponse: 'rejectedResponse',
  comments: 'comments',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KYCDocumentScalarFieldEnum = {
  id: 'id',
  kycId: 'kycId',
  type: 'type',
  url: 'url',
  key: 'key',
  uploadedAt: 'uploadedAt'
};

exports.Prisma.MembershipUsageScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  month: 'month',
  emailsSent: 'emailsSent',
  subscribersAdded: 'subscribersAdded',
  campaignsCreated: 'campaignsCreated',
  blogPostsCreated: 'blogPostsCreated',
  aiGenerationsUsed: 'aiGenerationsUsed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogPostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  subtitle: 'subtitle',
  slug: 'slug',
  content: 'content',
  excerpt: 'excerpt',
  format: 'format',
  status: 'status',
  visibility: 'visibility',
  featuredImage: 'featuredImage',
  featuredVideo: 'featuredVideo',
  galleryImages: 'galleryImages',
  authorId: 'authorId',
  authorBio: 'authorBio',
  authorTitle: 'authorTitle',
  author: 'author',
  categoryId: 'categoryId',
  seoTitle: 'seoTitle',
  seoDescription: 'seoDescription',
  seoKeywords: 'seoKeywords',
  seoScore: 'seoScore',
  shares: 'shares',
  readTime: 'readTime',
  wordCount: 'wordCount',
  characterCount: 'characterCount',
  likes: 'likes',
  views: 'views',
  flagReason: 'flagReason',
  isFlagged: 'isFlagged',
  isFeatured: 'isFeatured',
  isPinned: 'isPinned',
  allowComments: 'allowComments',
  publishedAt: 'publishedAt',
  flaggedAt: 'flaggedAt',
  scheduledAt: 'scheduledAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  generatedById: 'generatedById'
};

exports.Prisma.FlagedBlogPostScalarFieldEnum = {
  id: 'id',
  reason: 'reason',
  comment: 'comment',
  flaggedBy: 'flaggedBy',
  status: 'status',
  createdAt: 'createdAt',
  reviewedAt: 'reviewedAt',
  postId: 'postId',
  userId: 'userId'
};

exports.Prisma.BlogPostViewScalarFieldEnum = {
  id: 'id',
  postId: 'postId',
  userId: 'userId',
  externalName: 'externalName',
  createdAt: 'createdAt'
};

exports.Prisma.BlogCategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogTagScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BlogCommentScalarFieldEnum = {
  id: 'id',
  content: 'content',
  authorId: 'authorId',
  postId: 'postId',
  userId: 'userId',
  parentId: 'parentId',
  externalName: 'externalName',
  externalAvatar: 'externalAvatar',
  likes: 'likes',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ReportedCommentScalarFieldEnum = {
  id: 'id',
  commentId: 'commentId',
  blogSlug: 'blogSlug',
  blogOwner: 'blogOwner',
  parentCommentBy: 'parentCommentBy',
  reportedBy: 'reportedBy',
  reason: 'reason',
  reportedAt: 'reportedAt',
  resolved: 'resolved'
};

exports.Prisma.BlogAIGenerationScalarFieldEnum = {
  id: 'id',
  prompt: 'prompt',
  parameters: 'parameters',
  status: 'status',
  output: 'output',
  format: 'format',
  cost: 'cost',
  tokensUsed: 'tokensUsed',
  model: 'model',
  userId: 'userId',
  createdAt: 'createdAt',
  completedAt: 'completedAt'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  userId: 'userId',
  description: 'description',
  type: 'type',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  emailsSent: 'emailsSent',
  recipients: 'recipients',
  openRate: 'openRate',
  clickRate: 'clickRate',
  lastSentAt: 'lastSentAt'
};

exports.Prisma.SubscriberScalarFieldEnum = {
  id: 'id',
  email: 'email',
  name: 'name',
  newsLetterOwnerId: 'newsLetterOwnerId',
  source: 'source',
  status: 'status',
  campaignId: 'campaignId',
  pageUrl: 'pageUrl',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailNotificationScalarFieldEnum = {
  id: 'id',
  type: 'type',
  category: 'category',
  title: 'title',
  content: 'content',
  textContent: 'textContent',
  htmlContent: 'htmlContent',
  status: 'status',
  priority: 'priority',
  userId: 'userId',
  emailsSentCount: 'emailsSentCount',
  openCount: 'openCount',
  clickCount: 'clickCount',
  recipients: 'recipients',
  bounceCount: 'bounceCount',
  openedByEmails: 'openedByEmails',
  clickedByEmails: 'clickedByEmails',
  lastOpened: 'lastOpened',
  lastClicked: 'lastClicked',
  metadata: 'metadata',
  sentAt: 'sentAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  read: 'read'
};

exports.Prisma.ClickedLinkScalarFieldEnum = {
  id: 'id',
  emailId: 'emailId',
  url: 'url',
  clickedAt: 'clickedAt',
  clickedBy: 'clickedBy'
};

exports.Prisma.NotificationEmailClickedLinkScalarFieldEnum = {
  id: 'id',
  notificationEmailId: 'notificationEmailId',
  url: 'url',
  clickedAt: 'clickedAt',
  clickedBy: 'clickedBy'
};

exports.Prisma.EmailScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  emailSubject: 'emailSubject',
  previewText: 'previewText',
  builderMode: 'builderMode',
  builderData: 'builderData',
  templateUsed: 'templateUsed',
  status: 'status',
  emailType: 'emailType',
  trackOpens: 'trackOpens',
  trackClicks: 'trackClicks',
  enableUnsubscribe: 'enableUnsubscribe',
  scheduleDate: 'scheduleDate',
  scheduleTime: 'scheduleTime',
  emailsSentCount: 'emailsSentCount',
  recipients: 'recipients',
  bounceCount: 'bounceCount',
  openCount: 'openCount',
  clickCount: 'clickCount',
  sentAt: 'sentAt',
  lastOpened: 'lastOpened',
  lastClicked: 'lastClicked',
  openedByIps: 'openedByIps',
  openedByEmails: 'openedByEmails',
  clickedByIps: 'clickedByIps',
  clickedByEmails: 'clickedByEmails',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  newsLetterOwnerId: 'newsLetterOwnerId',
  campaignId: 'campaignId',
  messageId: 'messageId'
};

exports.Prisma.EmailElementScalarFieldEnum = {
  id: 'id',
  emailId: 'emailId',
  elementId: 'elementId',
  type: 'type',
  content: 'content',
  properties: 'properties',
  sortOrder: 'sortOrder',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailTemplateScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  thumbnail: 'thumbnail',
  category: 'category',
  tags: 'tags',
  elements: 'elements',
  subject: 'subject',
  isPublic: 'isPublic',
  isFeatured: 'isFeatured',
  usageCount: 'usageCount',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EmailAttachmentScalarFieldEnum = {
  id: 'id',
  emailId: 'emailId',
  filename: 'filename',
  fileSize: 'fileSize',
  mimeType: 'mimeType',
  url: 'url',
  createdAt: 'createdAt'
};

exports.Prisma.EmailRecipientScalarFieldEnum = {
  id: 'id',
  emailId: 'emailId',
  recipientEmail: 'recipientEmail',
  status: 'status',
  sentAt: 'sentAt',
  deliveredAt: 'deliveredAt',
  openedAt: 'openedAt',
  clickedAt: 'clickedAt',
  bouncedAt: 'bouncedAt',
  bounceReason: 'bounceReason',
  unsubscribeAt: 'unsubscribeAt'
};

exports.Prisma.EmailAnalyticsScalarFieldEnum = {
  id: 'id',
  emailId: 'emailId',
  totalOpens: 'totalOpens',
  deliveredCount: 'deliveredCount',
  totalRecipients: 'totalRecipients',
  uniqueOpens: 'uniqueOpens',
  totalClicks: 'totalClicks',
  uniqueClicks: 'uniqueClicks',
  deliveryRate: 'deliveryRate',
  openRate: 'openRate',
  clickRate: 'clickRate',
  bounceRate: 'bounceRate',
  unsubscribeCount: 'unsubscribeCount',
  spamReportCount: 'spamReportCount',
  forwardCount: 'forwardCount',
  deviceBreakdown: 'deviceBreakdown',
  locationData: 'locationData'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Plan = exports.$Enums.Plan = {
  FREE: 'FREE',
  LAUNCH: 'LAUNCH',
  SCALE: 'SCALE',
  ENTERPRISE: 'ENTERPRISE'
};

exports.Role = exports.$Enums.Role = {
  USER: 'USER',
  NEWSLETTEROWNER: 'NEWSLETTEROWNER',
  PLATFORMADMIN: 'PLATFORMADMIN',
  SUPERADMIN: 'SUPERADMIN',
  BLOGWRITER: 'BLOGWRITER'
};

exports.PlanSubscriptionStatus = exports.$Enums.PlanSubscriptionStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  PAST_DUE: 'PAST_DUE',
  CANCELLED: 'CANCELLED'
};

exports.AccountType = exports.$Enums.AccountType = {
  INDIVIDUAL: 'INDIVIDUAL',
  ORGANIZATION: 'ORGANIZATION'
};

exports.KYCStatus = exports.$Enums.KYCStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  REJECTED: 'REJECTED',
  APPROVED: 'APPROVED',
  IN_PROGRESS: 'IN_PROGRESS'
};

exports.KYCAccountType = exports.$Enums.KYCAccountType = {
  INDIVIDUAL: 'INDIVIDUAL',
  ORGANIZATION: 'ORGANIZATION'
};

exports.ContentFormat = exports.$Enums.ContentFormat = {
  MARKDOWN: 'MARKDOWN',
  HTML: 'HTML',
  RICH_TEXT: 'RICH_TEXT'
};

exports.PostStatus = exports.$Enums.PostStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED',
  ARCHIVED: 'ARCHIVED',
  SCHEDULED: 'SCHEDULED'
};

exports.PostVisibility = exports.$Enums.PostVisibility = {
  PUBLIC: 'PUBLIC',
  PRIVATE: 'PRIVATE',
  MEMBERS_ONLY: 'MEMBERS_ONLY'
};

exports.FlagStatus = exports.$Enums.FlagStatus = {
  FLAGGED: 'FLAGGED',
  RESOLVED: 'RESOLVED'
};

exports.AIGenerationStatus = exports.$Enums.AIGenerationStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  IN_PROGRESS: 'IN_PROGRESS'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  ENDED: 'ENDED'
};

exports.SubscriptionStatus = exports.$Enums.SubscriptionStatus = {
  SUBSCRIBED: 'SUBSCRIBED',
  UNSUBSCRIBED: 'UNSUBSCRIBED'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  EMAIL: 'EMAIL',
  SYSTEM: 'SYSTEM',
  PUSH: 'PUSH',
  SMS: 'SMS'
};

exports.NotificationCategory = exports.$Enums.NotificationCategory = {
  WELCOME: 'WELCOME',
  NEWSLETTER: 'NEWSLETTER',
  NEW_BLOG: 'NEW_BLOG',
  KYC_APPROVAL: 'KYC_APPROVAL',
  FLAGGED: 'FLAGGED',
  FLAGGED_RESOLVED: 'FLAGGED_RESOLVED'
};

exports.NotificationStatus = exports.$Enums.NotificationStatus = {
  DRAFT: 'DRAFT',
  PENDING: 'PENDING',
  SENDING: 'SENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  FAILED: 'FAILED',
  READ: 'READ'
};

exports.NotificationPriority = exports.$Enums.NotificationPriority = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.EmailStatus = exports.$Enums.EmailStatus = {
  DRAFT: 'DRAFT',
  SCHEDULED: 'SCHEDULED',
  SENDING: 'SENDING',
  SENT: 'SENT',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.EmailType = exports.$Enums.EmailType = {
  BROADCAST: 'BROADCAST',
  TRANSACTIONAL: 'TRANSACTIONAL',
  NEWSLETTER: 'NEWSLETTER',
  CAMPAIGN: 'CAMPAIGN',
  AUTOMATION: 'AUTOMATION',
  TEST: 'TEST'
};

exports.ElementType = exports.$Enums.ElementType = {
  TEXT: 'TEXT',
  IMAGE: 'IMAGE',
  VIDEO: 'VIDEO',
  BUTTON: 'BUTTON',
  SOCIAL: 'SOCIAL',
  DIVIDER: 'DIVIDER',
  COLUMNS: 'COLUMNS'
};

exports.RecipientStatus = exports.$Enums.RecipientStatus = {
  FAILED: 'FAILED',
  PENDING: 'PENDING',
  SENT: 'SENT',
  DELIVERED: 'DELIVERED',
  OPENED: 'OPENED',
  CLICKED: 'CLICKED',
  BOUNCED: 'BOUNCED',
  UNSUBSCRIBED: 'UNSUBSCRIBED',
  COMPLAINED: 'COMPLAINED'
};

exports.Prisma.ModelName = {
  User: 'User',
  RefreshToken: 'RefreshToken',
  OTP: 'OTP',
  Invoice: 'Invoice',
  ThirdPartyOTP: 'ThirdPartyOTP',
  ApiKey: 'ApiKey',
  Kyc: 'Kyc',
  KYCDocument: 'KYCDocument',
  MembershipUsage: 'MembershipUsage',
  BlogPost: 'BlogPost',
  FlagedBlogPost: 'FlagedBlogPost',
  BlogPostView: 'BlogPostView',
  BlogCategory: 'BlogCategory',
  BlogTag: 'BlogTag',
  BlogComment: 'BlogComment',
  ReportedComment: 'ReportedComment',
  BlogAIGeneration: 'BlogAIGeneration',
  Campaign: 'Campaign',
  Subscriber: 'Subscriber',
  EmailNotification: 'EmailNotification',
  ClickedLink: 'ClickedLink',
  NotificationEmailClickedLink: 'NotificationEmailClickedLink',
  Email: 'Email',
  EmailElement: 'EmailElement',
  EmailTemplate: 'EmailTemplate',
  EmailAttachment: 'EmailAttachment',
  EmailRecipient: 'EmailRecipient',
  EmailAnalytics: 'EmailAnalytics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
